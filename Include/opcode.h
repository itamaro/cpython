/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE_H
#define Py_OPCODE_H
#ifdef __cplusplus
extern "C" {
#endif

/* Instruction opcodes for compiled code */
#define PY_OPCODES(X) \
  X(POP_TOP,                           1) \
  X(ROT_TWO,                           2) \
  X(ROT_THREE,                         3) \
  X(DUP_TOP,                           4) \
  X(DUP_TOP_TWO,                       5) \
  X(ROT_FOUR,                          6) \
  X(NOP,                               9) \
  X(UNARY_POSITIVE,                   10) \
  X(UNARY_NEGATIVE,                   11) \
  X(UNARY_NOT,                        12) \
  X(UNARY_INVERT,                     15) \
  X(BINARY_MATRIX_MULTIPLY,           16) \
  X(INPLACE_MATRIX_MULTIPLY,          17) \
  X(BINARY_POWER,                     19) \
  X(BINARY_MULTIPLY,                  20) \
  X(BINARY_MODULO,                    22) \
  X(BINARY_ADD,                       23) \
  X(BINARY_SUBTRACT,                  24) \
  X(BINARY_SUBSCR,                    25) \
  X(BINARY_FLOOR_DIVIDE,              26) \
  X(BINARY_TRUE_DIVIDE,               27) \
  X(INPLACE_FLOOR_DIVIDE,             28) \
  X(INPLACE_TRUE_DIVIDE,              29) \
  X(GET_LEN,                          30) \
  X(MATCH_MAPPING,                    31) \
  X(MATCH_SEQUENCE,                   32) \
  X(MATCH_KEYS,                       33) \
  X(PUSH_EXC_INFO,                    35) \
  X(POP_EXCEPT_AND_RERAISE,           37) \
  X(WITH_EXCEPT_START,                49) \
  X(GET_AITER,                        50) \
  X(GET_ANEXT,                        51) \
  X(BEFORE_ASYNC_WITH,                52) \
  X(BEFORE_WITH,                      53) \
  X(END_ASYNC_FOR,                    54) \
  X(INPLACE_ADD,                      55) \
  X(INPLACE_SUBTRACT,                 56) \
  X(INPLACE_MULTIPLY,                 57) \
  X(INPLACE_MODULO,                   59) \
  X(STORE_SUBSCR,                     60) \
  X(DELETE_SUBSCR,                    61) \
  X(BINARY_LSHIFT,                    62) \
  X(BINARY_RSHIFT,                    63) \
  X(BINARY_AND,                       64) \
  X(BINARY_XOR,                       65) \
  X(BINARY_OR,                        66) \
  X(INPLACE_POWER,                    67) \
  X(GET_ITER,                         68) \
  X(GET_YIELD_FROM_ITER,              69) \
  X(PRINT_EXPR,                       70) \
  X(LOAD_BUILD_CLASS,                 71) \
  X(YIELD_FROM,                       72) \
  X(GET_AWAITABLE,                    73) \
  X(LOAD_ASSERTION_ERROR,             74) \
  X(INPLACE_LSHIFT,                   75) \
  X(INPLACE_RSHIFT,                   76) \
  X(INPLACE_AND,                      77) \
  X(INPLACE_XOR,                      78) \
  X(INPLACE_OR,                       79) \
  X(LIST_TO_TUPLE,                    82) \
  X(RETURN_VALUE,                     83) \
  X(IMPORT_STAR,                      84) \
  X(SETUP_ANNOTATIONS,                85) \
  X(YIELD_VALUE,                      86) \
  X(POP_EXCEPT,                       89) \
  X(HAVE_ARGUMENT,                    90) \
  X(STORE_NAME,                       90) \
  X(DELETE_NAME,                      91) \
  X(UNPACK_SEQUENCE,                  92) \
  X(FOR_ITER,                         93) \
  X(UNPACK_EX,                        94) \
  X(STORE_ATTR,                       95) \
  X(DELETE_ATTR,                      96) \
  X(STORE_GLOBAL,                     97) \
  X(DELETE_GLOBAL,                    98) \
  X(ROT_N,                            99) \
  X(LOAD_CONST,                      100) \
  X(LOAD_NAME,                       101) \
  X(BUILD_TUPLE,                     102) \
  X(BUILD_LIST,                      103) \
  X(BUILD_SET,                       104) \
  X(BUILD_MAP,                       105) \
  X(LOAD_ATTR,                       106) \
  X(COMPARE_OP,                      107) \
  X(IMPORT_NAME,                     108) \
  X(IMPORT_FROM,                     109) \
  X(JUMP_FORWARD,                    110) \
  X(JUMP_IF_FALSE_OR_POP,            111) \
  X(JUMP_IF_TRUE_OR_POP,             112) \
  X(JUMP_ABSOLUTE,                   113) \
  X(POP_JUMP_IF_FALSE,               114) \
  X(POP_JUMP_IF_TRUE,                115) \
  X(LOAD_GLOBAL,                     116) \
  X(IS_OP,                           117) \
  X(CONTAINS_OP,                     118) \
  X(RERAISE,                         119) \
  X(COPY,                            120) \
  X(JUMP_IF_NOT_EXC_MATCH,           121) \
  X(LOAD_FAST,                       124) \
  X(STORE_FAST,                      125) \
  X(DELETE_FAST,                     126) \
  X(GEN_START,                       129) \
  X(RAISE_VARARGS,                   130) \
  X(CALL_FUNCTION,                   131) \
  X(MAKE_FUNCTION,                   132) \
  X(BUILD_SLICE,                     133) \
  X(MAKE_CELL,                       135) \
  X(LOAD_CLOSURE,                    136) \
  X(LOAD_DEREF,                      137) \
  X(STORE_DEREF,                     138) \
  X(DELETE_DEREF,                    139) \
  X(CALL_FUNCTION_KW,                141) \
  X(CALL_FUNCTION_EX,                142) \
  X(EXTENDED_ARG,                    144) \
  X(LIST_APPEND,                     145) \
  X(SET_ADD,                         146) \
  X(MAP_ADD,                         147) \
  X(LOAD_CLASSDEREF,                 148) \
  X(MATCH_CLASS,                     152) \
  X(FORMAT_VALUE,                    155) \
  X(BUILD_CONST_KEY_MAP,             156) \
  X(BUILD_STRING,                    157) \
  X(LOAD_METHOD,                     160) \
  X(CALL_METHOD,                     161) \
  X(LIST_EXTEND,                     162) \
  X(SET_UPDATE,                      163) \
  X(DICT_MERGE,                      164) \
  X(DICT_UPDATE,                     165) \
  X(CALL_METHOD_KW,                  166) \
  X(BINARY_ADD_ADAPTIVE,               7) \
  X(BINARY_ADD_INT,                    8) \
  X(BINARY_ADD_FLOAT,                 13) \
  X(BINARY_ADD_UNICODE,               14) \
  X(BINARY_ADD_UNICODE_INPLACE_FAST,  18) \
  X(BINARY_MULTIPLY_ADAPTIVE,         21) \
  X(BINARY_MULTIPLY_INT,              34) \
  X(BINARY_MULTIPLY_FLOAT,            36) \
  X(BINARY_SUBSCR_ADAPTIVE,           38) \
  X(BINARY_SUBSCR_LIST_INT,           39) \
  X(BINARY_SUBSCR_TUPLE_INT,          40) \
  X(BINARY_SUBSCR_DICT,               41) \
  X(CALL_FUNCTION_ADAPTIVE,           42) \
  X(CALL_FUNCTION_BUILTIN_O,          43) \
  X(CALL_FUNCTION_BUILTIN_FAST,       44) \
  X(CALL_FUNCTION_LEN,                45) \
  X(CALL_FUNCTION_ISINSTANCE,         46) \
  X(CALL_FUNCTION_PY_SIMPLE,          47) \
  X(JUMP_ABSOLUTE_QUICK,              48) \
  X(LOAD_ATTR_ADAPTIVE,               58) \
  X(LOAD_ATTR_INSTANCE_VALUE,         80) \
  X(LOAD_ATTR_WITH_HINT,              81) \
  X(LOAD_ATTR_SLOT,                   87) \
  X(LOAD_ATTR_MODULE,                 88) \
  X(LOAD_GLOBAL_ADAPTIVE,            122) \
  X(LOAD_GLOBAL_MODULE,              123) \
  X(LOAD_GLOBAL_BUILTIN,             127) \
  X(LOAD_METHOD_ADAPTIVE,            128) \
  X(LOAD_METHOD_CACHED,              134) \
  X(LOAD_METHOD_CLASS,               140) \
  X(LOAD_METHOD_MODULE,              143) \
  X(LOAD_METHOD_NO_DICT,             149) \
  X(STORE_ATTR_ADAPTIVE,             150) \
  X(STORE_ATTR_INSTANCE_VALUE,       151) \
  X(STORE_ATTR_SLOT,                 153) \
  X(STORE_ATTR_WITH_HINT,            154) \
  X(LOAD_FAST__LOAD_FAST,            158) \
  X(STORE_FAST__LOAD_FAST,           159) \
  X(LOAD_FAST__LOAD_CONST,           167) \
  X(LOAD_CONST__LOAD_FAST,           168) \
  X(STORE_FAST__STORE_FAST,          169) \
  X(DO_TRACING,                      255)

#define OP(op, value) static const int op = value;
PY_OPCODES(OP)
#undef OP

#ifdef NEED_OPCODE_JUMP_TABLES
static uint32_t _PyOpcode_RelativeJump[8] = {
    0U,
    0U,
    536870912U,
    16384U,
    0U,
    0U,
    0U,
    0U,
};
static uint32_t _PyOpcode_Jump[8] = {
    0U,
    0U,
    536870912U,
    34586624U,
    0U,
    0U,
    0U,
    0U,
};
#endif /* OPCODE_TABLES */

#define HAS_CONST(op) (false\
    || ((op) == 100) \
    )

#define HAS_ARG(op) ((op) >= HAVE_ARGUMENT)

/* Reserve some bytecodes for internal use in the compiler.
 * The value of 240 is arbitrary. */
#define IS_ARTIFICIAL(op) ((op) > 240)

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE_H */
